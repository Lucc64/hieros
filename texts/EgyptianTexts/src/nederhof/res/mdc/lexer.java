/* The following code was generated by JFlex 1.4.1 on 8/17/09 10:10 PM */

/***************************************************************************/
/*                                                                         */
/*  MdcSyntax.flex                                                         */
/*                                                                         */
/*  Copyright (c) 2008 Mark-Jan Nederhof                                   */
/*                                                                         */
/*  This file is part of the implementation of AELalign, and may only be   */
/*  used, modified, and distributed under the terms of the                 */
/*  GNU General Public License (see doc/GPL.TXT).                          */
/*  By continuing to use, modify, or distribute this file you indicate     */
/*  that you have read the license and understand and accept it fully.     */
/*                                                                         */
/***************************************************************************/

// JFlex specification of MDC-88 (Buurman et al., 1988).
// See http://www.catchpenny.org/codage/ for online MDC documentation (MDC-97).
// See also the MDC parser in JSesh by Rosmorduc.

package nederhof.res.mdc;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/17/09 10:10 PM from the specification file
 * <tt>/home/markjan/Egyptian/myegyptian/nederhof/res/mdc/MdcSyntax.flex</tt>
 */
class lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PROPERTIES = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\35\1\0\1\2\1\35\22\0\1\35\1\7\1\66"+
    "\1\31\1\64\1\11\1\30\1\67\1\26\1\27\1\25\1\12\1\21"+
    "\1\3\1\54\1\51\1\61\1\42\1\43\1\44\1\63\5\1\1\24"+
    "\1\0\1\55\1\10\1\62\1\5\1\0\1\37\4\36\1\57\1\36"+
    "\1\57\3\36\1\23\5\36\1\45\1\57\7\36\1\32\1\15\1\33"+
    "\1\4\1\34\1\0\1\40\1\65\1\16\1\47\1\46\1\56\1\16"+
    "\1\52\1\50\2\16\1\20\1\60\4\16\1\41\1\13\1\14\1\16"+
    "\1\53\4\16\1\17\1\6\1\22\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\2\2\1\11\2\1\1\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\1\2\2\1\21"+
    "\2\2\1\22\1\23\1\2\1\24\1\25\2\1\3\26"+
    "\1\1\1\27\1\30\1\31\1\32\1\33\1\34\1\0"+
    "\1\35\1\36\1\37\1\0\1\40\4\32\1\41\1\42"+
    "\1\0\1\43\1\2\1\31\1\16\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\3\23\1\2\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\2\0\1\35\1\0\1\37\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\32\1\76\2\0"+
    "\1\2\1\77\1\10\1\100\2\0\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\160\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\160\0\u0380\0\160\0\160\0\u03b8\0\u03f0\0\u0428"+
    "\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8"+
    "\0\u0620\0\160\0\u0658\0\u0690\0\u06c8\0\u0700\0\160\0\u0738"+
    "\0\u0770\0\160\0\u07a8\0\u07e0\0\u0818\0\160\0\160\0\u0850"+
    "\0\u0888\0\160\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0968\0\160\0\u0a48\0\160\0\u0a80\0\160\0\u0ab8"+
    "\0\160\0\160\0\u0af0\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\160\0\160\0\160\0\160\0\u0b28\0\160\0\u0b60"+
    "\0\u0b98\0\160\0\160\0\160\0\160\0\160\0\160\0\160"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0818\0\u0818\0\u0818"+
    "\0\u0818\0\u0818\0\u0818\0\u0ce8\0\u0d20\0\u0d20\0\u0d58\0\u0d90"+
    "\0\160\0\160\0\u0968\0\u0dc8\0\u0e00\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\5\1\3\1\13\1\14\1\15\1\16\1\15\1\17"+
    "\1\15\1\3\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\5\1\21\1\32\2\15"+
    "\3\33\1\21\3\15\1\34\1\35\1\36\1\37\1\40"+
    "\1\14\1\41\1\15\1\33\1\42\1\4\1\43\1\15"+
    "\1\44\1\45\1\3\1\46\6\3\1\47\2\3\2\50"+
    "\1\3\1\50\1\3\1\50\1\47\1\51\1\50\7\3"+
    "\1\52\1\50\1\47\4\50\3\46\4\50\1\3\2\50"+
    "\2\3\3\50\1\46\1\3\1\46\1\3\1\50\2\3"+
    "\71\0\1\4\40\0\3\4\14\0\1\4\1\0\1\4"+
    "\35\0\1\53\42\0\1\54\64\0\1\55\3\0\1\56"+
    "\34\0\3\55\14\0\1\55\1\0\1\55\4\0\3\11"+
    "\1\0\64\11\7\0\1\57\1\60\71\0\1\61\1\62"+
    "\1\63\1\0\1\61\1\0\1\61\17\0\2\61\4\0"+
    "\3\61\1\0\2\61\2\0\1\61\1\0\1\61\4\0"+
    "\1\61\15\0\2\15\1\0\1\15\1\0\1\15\2\0"+
    "\1\15\12\0\4\15\3\64\4\15\1\0\2\15\2\0"+
    "\3\15\1\64\1\42\2\0\1\15\15\0\2\15\1\0"+
    "\1\15\1\0\1\15\2\0\1\15\12\0\4\15\3\0"+
    "\4\15\1\0\2\15\2\0\3\15\4\0\1\15\3\0"+
    "\1\65\11\0\1\66\1\67\1\0\1\66\1\0\1\66"+
    "\2\0\1\66\12\0\3\66\1\70\3\65\1\71\2\66"+
    "\1\72\1\0\2\66\2\0\3\66\1\65\1\0\1\65"+
    "\1\0\1\66\21\0\1\73\1\74\2\0\1\74\77\0"+
    "\1\75\35\0\1\76\11\0\2\15\1\0\1\15\1\0"+
    "\1\15\2\0\1\15\12\0\4\15\3\76\4\15\1\0"+
    "\2\15\2\0\3\15\1\76\1\0\1\76\1\0\1\15"+
    "\27\0\1\77\72\0\1\100\2\0\1\101\65\0\1\102"+
    "\10\0\3\103\16\0\1\103\23\0\1\104\10\0\1\105"+
    "\1\0\1\106\33\0\1\107\1\110\33\0\1\111\35\0"+
    "\1\76\11\0\2\15\1\0\1\15\1\0\1\15\2\0"+
    "\1\15\12\0\2\15\1\21\1\15\3\76\4\15\1\0"+
    "\2\15\2\0\3\15\1\76\1\0\1\76\1\0\1\15"+
    "\3\0\1\4\40\0\3\4\14\0\1\4\1\42\1\4"+
    "\55\0\1\112\31\0\2\15\1\0\1\15\1\0\1\15"+
    "\2\0\1\15\12\0\4\15\3\64\4\15\1\113\2\15"+
    "\2\0\3\15\1\64\1\42\2\0\1\15\15\0\2\15"+
    "\1\0\1\15\1\0\1\15\2\0\1\15\12\0\4\15"+
    "\3\0\4\15\1\114\2\15\2\0\3\15\4\0\1\15"+
    "\56\0\1\115\26\0\1\116\26\0\3\117\1\0\1\120"+
    "\3\0\1\116\3\0\2\116\1\120\1\117\3\0\1\120"+
    "\3\0\1\76\11\0\2\15\1\0\1\15\1\0\1\15"+
    "\2\0\1\15\12\0\4\15\3\121\4\15\1\0\2\15"+
    "\2\0\3\15\1\121\1\42\1\76\1\0\1\15\43\0"+
    "\1\122\23\0\1\123\35\0\1\124\67\0\1\125\35\0"+
    "\1\46\40\0\3\46\14\0\1\46\1\0\1\46\5\0"+
    "\1\50\11\0\2\50\1\0\1\50\1\0\1\50\2\0"+
    "\1\50\10\0\1\50\1\0\13\50\1\0\2\50\2\0"+
    "\4\50\1\0\1\50\1\0\1\50\24\0\1\52\113\0"+
    "\1\126\16\0\1\127\6\0\1\130\64\0\1\55\40\0"+
    "\3\55\14\0\1\55\1\0\1\55\5\0\1\131\40\0"+
    "\3\131\14\0\1\131\1\0\1\131\4\0\12\61\1\132"+
    "\2\61\1\133\52\61\12\63\1\134\2\63\1\135\52\63"+
    "\62\0\1\42\6\0\1\65\40\0\3\65\14\0\1\65"+
    "\1\0\1\65\5\0\1\55\11\0\2\66\1\0\1\66"+
    "\1\0\1\66\2\0\1\66\12\0\4\66\3\55\4\66"+
    "\1\0\2\66\2\0\3\66\1\55\1\0\1\55\1\0"+
    "\1\66\3\0\1\55\11\0\2\66\1\0\1\66\1\0"+
    "\1\66\2\0\1\66\12\0\4\66\1\136\1\137\1\140"+
    "\4\66\1\0\2\66\2\0\3\66\1\55\1\0\1\55"+
    "\1\0\1\66\3\0\1\55\11\0\2\66\1\0\1\66"+
    "\1\0\1\66\2\0\1\66\12\0\4\66\1\141\1\142"+
    "\1\143\1\66\1\144\2\66\1\0\2\66\2\0\3\66"+
    "\1\55\1\0\1\55\1\0\1\66\3\0\1\145\1\0"+
    "\1\146\7\0\2\66\1\0\1\66\1\0\1\66\2\0"+
    "\1\66\12\0\4\66\3\145\4\66\1\0\2\66\2\0"+
    "\3\66\1\145\1\0\1\145\1\0\1\66\3\0\1\147"+
    "\40\0\3\147\14\0\1\147\1\0\1\147\5\0\1\76"+
    "\21\0\1\150\12\0\2\150\2\0\3\76\1\150\11\0"+
    "\1\150\1\0\1\76\1\0\1\76\34\0\1\151\101\0"+
    "\3\103\16\0\1\103\46\0\3\117\1\0\1\120\11\0"+
    "\1\120\1\117\3\0\1\120\44\0\3\117\14\0\1\117"+
    "\7\0\1\76\21\0\1\150\12\0\2\150\2\0\3\76"+
    "\1\150\11\0\1\150\1\0\1\76\1\42\1\76\5\0"+
    "\1\131\7\0\1\152\30\0\3\131\14\0\1\131\1\0"+
    "\1\131\4\0\12\61\3\0\1\61\1\0\1\61\1\0"+
    "\17\61\2\0\4\61\3\0\1\61\2\0\2\61\1\0"+
    "\1\61\1\0\4\61\1\0\17\61\1\133\52\61\12\63"+
    "\3\0\1\63\1\0\1\63\1\0\17\63\2\0\4\63"+
    "\3\0\1\63\2\0\2\63\1\0\1\63\1\0\4\63"+
    "\1\0\17\63\1\135\52\63\1\0\1\55\11\0\2\66"+
    "\1\0\1\66\1\0\1\66\2\0\1\66\12\0\4\66"+
    "\3\55\2\66\1\153\1\66\1\0\2\66\2\0\3\66"+
    "\1\55\1\0\1\55\1\0\1\66\3\0\1\145\40\0"+
    "\3\145\14\0\1\145\1\0\1\145\5\0\1\147\17\0"+
    "\1\154\20\0\3\147\14\0\1\147\1\0\1\147\27\0"+
    "\1\150\12\0\2\150\5\0\1\150\11\0\1\150\11\0"+
    "\1\155\40\0\3\155\14\0\1\155\1\0\1\155\5\0"+
    "\1\155\20\0\1\156\17\0\3\155\14\0\1\155\1\0"+
    "\1\155\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\14\1\1\11\1\1\2\11"+
    "\14\1\1\11\4\1\1\11\2\1\1\11\3\1\2\11"+
    "\1\0\1\1\1\11\1\1\1\0\6\1\1\11\1\0"+
    "\1\11\1\1\1\11\1\1\2\11\1\1\12\11\1\1"+
    "\1\11\2\1\7\11\2\0\1\1\1\0\11\1\2\0"+
    "\1\1\2\11\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
        private Symbol symbol(int type) {
            return new Symbol(type, yychar, yyline);
        }

        private Symbol symbol(int type, Object value) {
            return new Symbol(type, yychar, yyline, value);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { return symbol(sym.ENDPHIL, ">");
          }
        case 65: break;
        case 9: 
          { return symbol(sym.MIRROR);
          }
        case 66: break;
        case 63: 
          { /* undocumented, but seems to mean roughly *[fit] */ 
	  return symbol(sym.ASTERISK, "fit");
          }
        case 67: break;
        case 53: 
          { /* MDC-97 only. */
	  return symbol(sym.SHADINGOFF);
          }
        case 68: break;
        case 62: 
          { /* JSesh */ 
	  return symbol(sym.ROTATE, yytext().substring(2));
          }
        case 69: break;
        case 64: 
          { /* JSesh */ 
	  return symbol(sym.REDGLYPH);
          }
        case 70: break;
        case 56: 
          { /* MDC-97 only. */
	  return symbol(sym.MIRRORROTATE, "90");
          }
        case 71: break;
        case 25: 
          { /* undocumented */ 
	  return symbol(sym.LIGATURE, yytext());
          }
        case 72: break;
        case 49: 
          { /* MDC-97 only. */
	  return symbol(sym.RED);
          }
        case 73: break;
        case 45: 
          { return symbol(sym.WHOLESHADE);
          }
        case 74: break;
        case 26: 
          { /* JSesh, ignored */
          }
        case 75: break;
        case 24: 
          { return symbol(sym.SHADINGTOGGLE);
          }
        case 76: break;
        case 34: 
          { /* This and all the below involving state PROPERTIES
	     is not part of MDC-88 nor MDC-97, but of JSesh. */
	  yybegin(PROPERTIES);
          }
        case 77: break;
        case 14: 
          { /* JSesh only. */ 
	  return symbol(sym.LIGATURE, yytext());
          }
        case 78: break;
        case 41: 
          { return symbol(sym.BEGINPHIL, "[");
          }
        case 79: break;
        case 59: 
          { /* MDC-97 only. */
	  return symbol(sym.ROTATE, "270");
          }
        case 80: break;
        case 3: 
          { /* grammar ignored */
          }
        case 81: break;
        case 18: 
          { return symbol(sym.QUARTERBLANK);
          }
        case 82: break;
        case 23: 
          { yybegin(YYINITIAL);
          }
        case 83: break;
        case 46: 
          { return symbol(sym.HORIZONTALSHADE);
          }
        case 84: break;
        case 8: 
          { /* See MDC-97; MDC-88 has only "!" */
	  return symbol(sym.EXCLAM);
          }
        case 85: break;
        case 29: 
          { /* catch-all for ++, +l, +i, etc. */
	  return symbol(sym.EXTRA, yytext().substring(2));
          }
        case 86: break;
        case 10: 
          { return symbol(sym.COLON, "");
          }
        case 87: break;
        case 11: 
          { return symbol(sym.ASTERISK, "");
          }
        case 88: break;
        case 28: 
          { return symbol(sym.EXCLAMEXCLAM);
          }
        case 89: break;
        case 30: 
          { return symbol(sym.HIERO);
          }
        case 90: break;
        case 58: 
          { /* MDC-97 only. */
	  return symbol(sym.MIRRORROTATE, "270");
          }
        case 91: break;
        case 39: 
          { return symbol(sym.BEGINPHIL, "{");
          }
        case 92: break;
        case 22: 
          { /* ignored */
          }
        case 93: break;
        case 20: 
          { return symbol(sym.ENDBOX, yytext().substring(0, yytext().length()-1));
          }
        case 94: break;
        case 51: 
          { return symbol(sym.ENDPHIL, "|]");
          }
        case 95: break;
        case 6: 
          { return symbol(sym.QUESTION);
          }
        case 96: break;
        case 33: 
          { /* JSesh */ 
	  return symbol(sym.GRAYGLYPH);
          }
        case 97: break;
        case 60: 
          { /* MDC-97 only. */
	  return symbol(sym.ROTATE, "180");
          }
        case 98: break;
        case 15: 
          { return symbol(sym.STACK);
          }
        case 99: break;
        case 40: 
          { return symbol(sym.BEGINPHIL, "<");
          }
        case 100: break;
        case 52: 
          { return symbol(sym.ENDPHIL, "'");
          }
        case 101: break;
        case 31: 
          { return symbol(sym.ALPHA, yytext().substring(2));
          }
        case 102: break;
        case 48: 
          { return symbol(sym.WHOLEBLANK);
          }
        case 103: break;
        case 57: 
          { /* MDC-97 only. */
	  return symbol(sym.MIRRORROTATE, "180");
          }
        case 104: break;
        case 19: 
          { /* Generalised from MDC-88 and MDC-97. */
	   return symbol(sym.BEGINBOX, yytext().substring(1));
          }
        case 105: break;
        case 32: 
          { /* MDC-97 only. */
	  return symbol(sym.SCALE, yytext().substring(1));
          }
        case 106: break;
        case 4: 
          { return symbol(sym.MINUS);
          }
        case 107: break;
        case 44: 
          { return symbol(sym.ENDPHIL, "]");
          }
        case 108: break;
        case 12: 
          { return symbol(sym.OPEN);
          }
        case 109: break;
        case 55: 
          { /* undocumented, but seems to mean roughly :[fit] */ 
	  return symbol(sym.COLON, "fit");
          }
        case 110: break;
        case 27: 
          { return symbol(sym.QUESTIONQUESTION);
          }
        case 111: break;
        case 21: 
          { return symbol(sym.COLORTOGGLE);
          }
        case 112: break;
        case 13: 
          { return symbol(sym.CLOSE);
          }
        case 113: break;
        case 37: 
          { /* JSesh only. */
	  return symbol(sym.STACK);
          }
        case 114: break;
        case 5: 
          { return symbol(sym.CARET);
          }
        case 115: break;
        case 50: 
          { /* MDC-97 only. */
	  return symbol(sym.BLACK);
          }
        case 116: break;
        case 38: 
          { /* MDC-97, not MDC-88 . */
	  return symbol(sym.QUADRATSHADE, yytext().substring(1));
          }
        case 117: break;
        case 42: 
          { return symbol(sym.BEGINPHIL, "[|");
          }
        case 118: break;
        case 47: 
          { return symbol(sym.VERTICALSHADE);
          }
        case 119: break;
        case 35: 
          { return symbol(sym.ENDPHIL, "}");
          }
        case 120: break;
        case 17: 
          { return symbol(sym.QUARTERSHADE);
          }
        case 121: break;
        case 54: 
          { /* MDC-97 only. */
	  return symbol(sym.SHADINGON);
          }
        case 122: break;
        case 7: 
          { return symbol(sym.TEXTSUPER, yytext().substring(1));
          }
        case 123: break;
        case 1: 
          { /* catch-all */
          }
        case 124: break;
        case 43: 
          { return symbol(sym.BEGINPHIL, "'");
          }
        case 125: break;
        case 61: 
          { /* MDC-97 only. */
	  return symbol(sym.ROTATE, "90");
          }
        case 126: break;
        case 16: 
          { /* Undocumented */ 
	  yybegin(PROPERTIES);
          }
        case 127: break;
        case 2: 
          { /* Captures Gardiner codes, mnemonics, and numbers, 
	     and @ from JSesh. */
	  return symbol(sym.SIGN, yytext());
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
