
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Aug 17 22:10:04 BST 2009
//----------------------------------------------------

package nederhof.res.mdc;

import java.awt.Point;
import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import nederhof.res.*;

/** CUP v0.10k generated parser.
  * @version Mon Aug 17 22:10:04 BST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\002\000\002\005\004" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\003\000\002\010\003\000\002\010\005\000" +
    "\002\011\003\000\002\011\006\000\002\012\003\000\002" +
    "\012\006\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\006" +
    "\000\002\015\003\000\002\015\004\000\002\016\003\000" +
    "\002\016\003\000\002\017\006\000\002\020\005\000\002" +
    "\020\005\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\023\002\000\002\023\004" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\026\005\000\002\026\005\000\002\027\002" +
    "\000\002\027\003\000\002\030\006\000\002\030\010\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\004\000\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\074\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\020\ufffd\024\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000" +
    "\056\002\001\003\050\005\022\006\024\007\054\010\027" +
    "\011\042\012\044\013\046\014\055\015\043\020\056\024" +
    "\030\033\025\034\032\035\053\036\023\037\036\040\041" +
    "\041\026\052\040\053\057\001\002\000\004\002\020\001" +
    "\002\000\074\002\uffff\003\uffff\004\007\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\020\uffff\024\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\uffff\044\011\045\014\046\016\047" +
    "\013\050\015\051\010\052\uffff\053\uffff\001\002\000\112" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002\000\112\002\uffbe" +
    "\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\001\002\000\112\002\uffc3\003\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\001\002\000\112\002\ufffa\003\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\001\002\000\112\002\uffc0\003\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\001" +
    "\002\000\112\002\uffc2\003\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\001\002\000" +
    "\112\002\uffbf\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000\112\002" +
    "\uffc1\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\001\002\000\112\002\ufffc\003" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\001\002\000\004\002\000\001\002\000" +
    "\070\002\uffeb\003\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\122\017" +
    "\uffeb\020\uffeb\021\uffeb\024\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\052" +
    "\uffeb\053\uffeb\001\002\000\074\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\020\ufffd\024\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\001\002\000\110\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\074" +
    "\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd" +
    "\024\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\001\002\000\110\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\024\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\001\002\000\050\004\ufffd\020\ufffd\024\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\001\002\000\074\002\ufffd\003\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\024\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\001\002\000\126\002\uffd6\003\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\001" +
    "\002\000\070\002\uffe6\003\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\024\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\052\uffe6\053\uffe6\001\002\000\110\002\ufffd\003\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\024\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\001\002\000\072\002\uffd8\003\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\052\uffd8\053\uffd8\001\002\000\056" +
    "\002\ufff8\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8\024\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\052\ufff8\053\ufff8\001\002\000\074\002\uffda\003\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\130\024\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\052\uffda" +
    "\053\uffda\001\002\000\112\002\uffc8\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\024\uffc8\030\112\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\001\002\000\066\002\uffed\003\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\017\117\020\uffed\021\uffed\024\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\115" +
    "\052\uffed\053\uffed\001\002\000\106\002\ufffd\003\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\024\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002" +
    "\000\112\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\030" +
    "\112\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002\000\074" +
    "\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd" +
    "\024\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\001\002\000\074\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\024\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\001\002\000\074\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\020\ufffd\024\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\001\002\000\070\002\uffe3\003\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\024\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\052\uffe3\053\uffe3\001\002\000\074\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\024\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\001\002\000\070\002\uffe4\003\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\024\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\052\uffe4\053\uffe4\001\002\000\056" +
    "\002\uffee\003\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020\uffee\024\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\052\uffee\053\uffee\001\002\000\072\002\uffe7\003\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\101\024\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\052\uffe7\053\uffe7" +
    "\001\002\000\072\002\uffe5\003\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\077\024\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\052\uffe5\053\uffe5\001\002\000\110\002" +
    "\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\001\002\000\074\002\ufffd\003\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\020\ufffd\024\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\001\002\000\074\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\020\ufffd\024\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002" +
    "\000\050\004\ufffd\020\ufffd\021\ufffd\024\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\001\002\000\106\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\024\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\056\002" +
    "\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\020\ufff9\024\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\052\ufff9\053\ufff9\001\002\000\056\002\ufffe\003\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\020\ufffe\024\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\052\ufffe\053\ufffe" +
    "\001\002\000\070\002\uffe9\003\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\024\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\052\uffe9\053\uffe9\001\002\000\072\002\uffd9\003" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\024\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\052\uffd9\053" +
    "\uffd9\001\002\000\106\002\uffbc\003\uffbc\004\007\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\024\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\011\045\014\046\016\047\013" +
    "\050\015\051\010\052\uffbc\053\uffbc\001\002\000\032\020" +
    "\056\021\067\024\030\033\025\034\032\035\053\036\023" +
    "\037\036\040\041\041\026\052\040\053\057\001\002\000" +
    "\052\004\007\020\uffe1\021\uffe1\024\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044" +
    "\011\045\014\046\016\047\013\050\015\051\010\052\uffe1" +
    "\053\uffe1\001\002\000\106\002\ufffd\003\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\024" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\034" +
    "\020\uffde\021\uffde\024\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\052\uffde\053\uffde" +
    "\001\002\000\034\020\uffe0\021\uffe0\024\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\052\uffe0\053\uffe0\001\002\000\034\020\uffdf\021\uffdf\024" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\052\uffdf\053\uffdf\001\002\000\106\002" +
    "\uffe2\003\uffe2\004\007\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\024\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\011\045\014\046\016\047\013\050\015\051\010\052\uffe2" +
    "\053\uffe2\001\002\000\074\002\ufff0\003\ufff0\004\007\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\020\ufff0\024\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\044\011\045\014" +
    "\046\016\047\013\050\015\051\010\052\ufff0\053\ufff0\001" +
    "\002\000\074\002\ufff5\003\ufff5\004\007\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\020\ufff5\024\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\044\011\045\014\046\016\047" +
    "\013\050\015\051\010\052\ufff5\053\ufff5\001\002\000\110" +
    "\002\uffcc\003\uffcc\004\007\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\011\045\014\046\016\047\013\050\015\051" +
    "\010\052\uffcc\053\uffcc\001\002\000\004\024\030\001\002" +
    "\000\072\002\uffdb\003\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\052\uffdb\053\uffdb\001\002\000\036\004\ufffd\024" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001" +
    "\002\000\036\004\007\024\030\033\025\034\032\035\053" +
    "\036\023\037\036\040\041\044\011\045\014\046\016\047" +
    "\013\050\015\051\010\001\002\000\070\002\uffda\003\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\024\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\052\uffda\053\uffda\001\002" +
    "\000\070\002\uffdd\003\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\024\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\052\uffdd\053\uffdd\001\002\000\074\002\ufff1\003\ufff1\004" +
    "\007\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\020\ufff1\024\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\044\011" +
    "\045\014\046\016\047\013\050\015\051\010\052\ufff1\053" +
    "\ufff1\001\002\000\074\002\ufff2\003\ufff2\004\007\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\020\ufff2\024\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\044\011\045\014\046" +
    "\016\047\013\050\015\051\010\052\ufff2\053\ufff2\001\002" +
    "\000\074\002\uffef\003\uffef\004\007\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\020\uffef\024\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\044\011\045\014\046\016\047\013" +
    "\050\015\051\010\052\uffef\053\uffef\001\002\000\074\002" +
    "\ufff3\003\ufff3\004\007\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3\024" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\044\011\045\014\046\016\047\013\050\015\051" +
    "\010\052\ufff3\053\ufff3\001\002\000\110\002\ufffd\003\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\024\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\001\002\000\110\002\uffc7\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\024\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001\002\000" +
    "\110\002\uffc9\003\uffc9\004\007\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\011\045\014\046\016\047\013\050\015" +
    "\051\010\052\uffc9\053\uffc9\001\002\000\106\002\uffbd\003" +
    "\uffbd\004\007\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\024\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\011\045" +
    "\014\046\016\047\013\050\015\051\010\052\uffbd\053\uffbd" +
    "\001\002\000\100\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\020\uffc4\021\uffc4\024\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\001\002\000\100\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\020\ufffd\021\ufffd\024\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\001\002\000\044\004\ufffd\020\ufffd\024\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\001\002\000\044\004\007\020\056\024\030\033\025" +
    "\034\032\035\053\036\023\037\036\040\041\044\011\045" +
    "\014\046\016\047\013\050\015\051\010\052\040\053\057" +
    "\001\002\000\070\002\uffea\003\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\122\017\uffea\020\uffea\021\uffea\024\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\052\uffea\053\uffea\001\002\000\044\004\ufffd\020" +
    "\ufffd\024\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\001\002\000\044\004\007\020\056" +
    "\024\030\033\025\034\032\035\053\036\023\037\036\040" +
    "\041\044\011\045\014\046\016\047\013\050\015\051\010" +
    "\052\040\053\057\001\002\000\070\002\uffe8\003\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\024" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\052\uffe8\053\uffe8\001\002\000" +
    "\100\002\uffec\003\uffec\004\007\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\020" +
    "\uffec\021\uffec\024\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\044\011\045\014\046" +
    "\016\047\013\050\015\051\010\052\uffec\053\uffec\001\002" +
    "\000\110\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\110\002\uffca" +
    "\003\uffca\004\007\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\024\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\011\045\014\046\016\047\013\050\015\051\010\052" +
    "\uffca\053\uffca\001\002\000\004\024\030\001\002\000\072" +
    "\002\uffdc\003\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\023\uffdc\024\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\052\uffdc\053\uffdc\001\002\000\110\002\uffcd\003\uffcd\004" +
    "\007\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\024\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\011\045" +
    "\014\046\016\047\013\050\015\051\010\052\uffcd\053\uffcd" +
    "\001\002\000\126\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\141\026\135\027\137\030\143\031\136" +
    "\032\134\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000" +
    "\126\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\126\002\uffd3" +
    "\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\001\002\000\126\002\uffd0\003\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\001\002\000\126\002\uffd2\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002" +
    "\000\126\002\uffd5\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002\000\126\002" +
    "\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\001\002\000\112\002\uffd7\003\uffd7" +
    "\004\007\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\011\045\014\046\016\047\013\050\015\051\010\052" +
    "\uffd7\053\uffd7\001\002\000\126\002\uffd1\003\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\001\002\000\074\002\ufff4\003\ufff4\004\007\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\020\ufff4\024\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\044\011\045\014\046\016" +
    "\047\013\050\015\051\010\052\ufff4\053\ufff4\001\002\000" +
    "\032\020\056\024\030\033\025\034\032\035\053\036\023" +
    "\037\036\040\041\041\026\042\146\052\040\053\057\001" +
    "\002\000\102\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\020\ufffd\021\ufffd\024\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\001\002\000\102\002\uffc6\003\uffc6\004\007\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\020\uffc6\021\uffc6\024\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\115\044\011\045\014\046\016\047\013\050\015\051" +
    "\010\052\uffc6\053\uffc6\001\002\000\100\002\ufffd\003\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\024\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\001\002\000\100\002\uffc5\003" +
    "\uffc5\004\007\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\021\uffc5\024" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\044\011\045\014\046\016\047\013\050" +
    "\015\051\010\052\uffc5\053\uffc5\001\002\000\110\002\uffce" +
    "\003\uffce\004\007\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\024\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\011\045\014\046\016\047\013\050\015\051\010\052" +
    "\uffce\053\uffce\001\002\000\074\002\ufff6\003\ufff6\004\007" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\020\ufff6\024\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\044\011\045" +
    "\014\046\016\047\013\050\015\051\010\052\ufff6\053\ufff6" +
    "\001\002\000\110\002\uffcb\003\uffcb\004\007\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\024" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\011\045\014\046\016\047" +
    "\013\050\015\051\010\052\uffcb\053\uffcb\001\002\000\074" +
    "\002\ufff7\003\ufff7\004\007\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7" +
    "\024\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\044\011\045\014\046\016\047\013\050\015" +
    "\051\010\052\ufff7\053\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\010\003\004\004\003\005\005\001\001\000" +
    "\036\007\060\010\057\011\036\012\020\013\061\014\044" +
    "\017\030\020\051\021\050\022\034\025\062\026\032\030" +
    "\033\033\046\001\001\000\002\001\001\000\006\006\016" +
    "\032\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\154" +
    "\001\001\000\004\005\153\001\001\000\004\005\152\001" +
    "\001\000\004\005\151\001\001\000\006\005\065\015\144" +
    "\001\001\000\004\005\143\001\001\000\004\023\132\001" +
    "\001\000\002\001\001\000\004\005\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\125\001\001\000\004\031\115\001\001\000\004\005\113" +
    "\001\001\000\004\027\110\001\001\000\004\005\107\001" +
    "\001\000\004\005\106\001\001\000\004\005\105\001\001" +
    "\000\002\001\001\000\004\005\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\075\001\001\000\004\005\074\001\001\000" +
    "\004\005\073\001\001\000\006\005\065\015\064\001\001" +
    "\000\004\005\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\016" +
    "\032\011\001\001\000\036\010\071\011\036\012\020\013" +
    "\061\014\044\016\070\017\030\020\051\021\050\022\034" +
    "\025\062\026\032\030\067\033\046\001\001\000\006\006" +
    "\016\032\011\001\001\000\004\005\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\016\032\011\001\001\000\006\006\016\032\011\001\001" +
    "\000\006\006\016\032\011\001\001\000\006\006\016\032" +
    "\011\001\001\000\004\022\077\001\001\000\002\001\001" +
    "\000\004\005\101\001\001\000\016\006\016\021\103\022" +
    "\102\025\062\026\032\032\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\016\032\011\001\001\000" +
    "\006\006\016\032\011\001\001\000\006\006\016\032\011" +
    "\001\001\000\006\006\016\032\011\001\001\000\004\005" +
    "\112\001\001\000\002\001\001\000\006\006\016\032\011" +
    "\001\001\000\006\006\016\032\011\001\001\000\002\001" +
    "\001\000\004\005\124\001\001\000\004\005\117\001\001" +
    "\000\032\006\016\012\120\013\061\014\044\017\030\020" +
    "\051\021\050\022\034\025\062\026\032\032\011\033\046" +
    "\001\001\000\002\001\001\000\004\005\122\001\001\000" +
    "\030\006\016\013\123\014\044\017\030\020\051\021\050" +
    "\022\034\025\062\026\032\032\011\033\046\001\001\000" +
    "\002\001\001\000\006\006\016\032\011\001\001\000\004" +
    "\005\126\001\001\000\006\006\016\032\011\001\001\000" +
    "\004\022\130\001\001\000\002\001\001\000\006\006\016" +
    "\032\011\001\001\000\006\005\141\024\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\016\032\011\001\001\000\002\001\001\000\006\006\016" +
    "\032\011\001\001\000\036\010\071\011\036\012\020\013" +
    "\061\014\044\016\070\017\030\020\051\021\050\022\034" +
    "\025\062\026\032\030\067\033\046\001\001\000\004\005" +
    "\146\001\001\000\010\006\016\031\147\032\011\001\001" +
    "\000\004\005\150\001\001\000\006\006\016\032\011\001" +
    "\001\000\006\006\016\032\011\001\001\000\006\006\016" +
    "\032\011\001\001\000\006\006\016\032\011\001\001\000" +
    "\006\006\016\032\011\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // Error messages are collected as strings.
    protected Vector errors = new Vector();

    // If first error has position, then this is it.
    public Point errorPosition = new Point(-1, -1);

    // String that is parsed. Kept for error reporting.
    private String string;

    // Auxiliary methods for conversion.
    public MdcResAux aux;

    // Construct parser by making lexer and storing input string.
    protected parser(String string, MdcResAux aux) {
        super(new lexer(new StringReader(string)));
        this.string = string;
        this.aux = aux;
    }

    // Create error message.
    public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol sym = (java_cup.runtime.Symbol) info;
            int charPos = sym.left;
            int lineNo = sym.right;
            reportError(message, charPos, lineNo);
        } else
            errors.add(message + "\n");
    }

    // Create error message with character position and line number.
    // Print previous and next line(s).
    protected void reportError(String message, int charPos, int lineNo) {
        if (lineNo >= 0 && charPos >= 0) {
	    if (errors.isEmpty())
		errorPosition = new Point(lineNo, charPos);
            int fromPos = string.lastIndexOf('\n', charPos);
            if (fromPos < 0)
                fromPos = 0;
            int toPos = string.indexOf('\n', charPos);
            if (toPos < 0)
                toPos = string.length();
            String before = (fromPos < charPos ? string.substring(fromPos,
charPos) : "");
            String after = (charPos < toPos ? string.substring(charPos, toPos)
: "");
            String report = message + " at line " + lineNo + ":\n";
            if (!before.matches("\\s*")) {
                report += before;
                if (!before.matches("(?s).*\n\\s*"))
                    report += "\n";
            }
            report += "***HERE***\n";
            if (!after.matches("\\s*")) {
                report += after;
                if (!after.matches("(?s).*\n\\s*"))
                    report += "\n";
            }
            errors.add(report);
        } else
            errors.add(message + "\n");
    }

    // As above, but terminate parsing.
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // philology ::= ENDPHIL seps 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.string(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*philology*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // philology ::= BEGINPHIL seps 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.string(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*philology*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // toggle ::= SHADINGOFF 
            {
              ResSwitch RESULT = null;
		 RESULT = parser.aux.switchs("noshade"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*toggle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // toggle ::= SHADINGON 
            {
              ResSwitch RESULT = null;
		 RESULT = parser.aux.switchs("shade"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*toggle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // toggle ::= SHADINGTOGGLE 
            {
              ResSwitch RESULT = null;
		 RESULT = parser.aux.switchs("shade"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*toggle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // toggle ::= BLACK 
            {
              ResSwitch RESULT = null;
		 RESULT = parser.aux.switchs("black"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*toggle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // toggle ::= RED 
            {
              ResSwitch RESULT = null;
		 RESULT = parser.aux.switchs("red"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*toggle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // toggle ::= COLORTOGGLE 
            {
              ResSwitch RESULT = null;
		 RESULT = parser.aux.switchs("blue"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*toggle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // shading ::= QUADRATSHADE 
            {
              Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.shading(e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*shading*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // box ::= BEGINBOX simple_groups ENDBOX seps shading seps 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SwitchAndHieroglyphic e2 = (SwitchAndHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResSwitch e4 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector e5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e6 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.box(e1, e3, e2, e5, e4.join(e6)); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*box*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // box ::= BEGINBOX simple_groups ENDBOX seps 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SwitchAndHieroglyphic e2 = (SwitchAndHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e4 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.box(e1, e3, e2, new Vector(), e4); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*box*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opt_blank_modifier ::= SCALE 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.scaleBlank(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*opt_blank_modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opt_blank_modifier ::= 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*opt_blank_modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // blank ::= WHOLEBLANK opt_blank_modifier seps 
            {
              ResEmptyglyph RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.empty(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*blank*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // blank ::= QUARTERBLANK opt_blank_modifier seps 
            {
              ResEmptyglyph RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.empty(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*blank*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // shade ::= QUARTERSHADE seps 
            {
              ResEmptyglyph RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.empty("ts", e); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*shade*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // shade ::= VERTICALSHADE seps 
            {
              ResEmptyglyph RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.empty("s", e); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*shade*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // shade ::= HORIZONTALSHADE seps 
            {
              ResEmptyglyph RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.empty("t", e); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*shade*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // shade ::= WHOLESHADE seps 
            {
              ResEmptyglyph RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.empty("shade", e); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*shade*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // glyph_modifier ::= GRAYGLYPH 
            {
              Vector RESULT = null;
		 RESULT = parser.aux.args("gray"); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*glyph_modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // glyph_modifier ::= REDGLYPH 
            {
              Vector RESULT = null;
		 RESULT = parser.aux.args("red"); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*glyph_modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // glyph_modifier ::= SCALE 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.scaleArgs(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*glyph_modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // glyph_modifier ::= MIRRORROTATE 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.mirrorRotateArgs(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*glyph_modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // glyph_modifier ::= ROTATE 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.rotateArgs(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*glyph_modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // glyph_modifier ::= MIRROR 
            {
              Vector RESULT = null;
		 RESULT = parser.aux.args("mirror"); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*glyph_modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // glyph_modifiers ::= glyph_modifiers glyph_modifier 
            {
              Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector e2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 e1.addAll(e2); RESULT = e1; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*glyph_modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // glyph_modifiers ::= 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*glyph_modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // glyph ::= SIGN glyph_modifiers seps 
            {
              ResNamedglyph RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector e2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e3 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.sign(e1, e2, e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*glyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // hieroglyph ::= blank 
            {
              ResTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResEmptyglyph e = (ResEmptyglyph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*hieroglyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // hieroglyph ::= shade 
            {
              ResTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResEmptyglyph e = (ResEmptyglyph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*hieroglyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // hieroglyph ::= glyph 
            {
              ResTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResNamedglyph e = (ResNamedglyph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*hieroglyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ligature ::= ligature LIGATURE glyph 
            {
              Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResNamedglyph e3 = (ResNamedglyph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.ligature(e1, e2, e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ligature*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ligature ::= glyph LIGATURE glyph 
            {
              Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResNamedglyph e1 = (ResNamedglyph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResNamedglyph e3 = (ResNamedglyph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.ligature(e1, e2, e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ligature*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stack ::= hieroglyph STACK seps hieroglyph 
            {
              ResStack RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ResTopgroup e1 = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResTopgroup e3 = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResStack(e1, e3, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stack*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_group ::= box 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*simple_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_group ::= quadrat 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*simple_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_groups ::= simple_groups simple_group 
            {
              SwitchAndHieroglyphic RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SwitchAndHieroglyphic e1 = (SwitchAndHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e2 = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1.add(e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*simple_groups*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_groups ::= seps 
            {
              SwitchAndHieroglyphic RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SwitchAndHieroglyphic(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*simple_groups*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // subgroup ::= OPEN simple_groups CLOSE seps 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SwitchAndHieroglyphic e1 = (SwitchAndHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1.horgroup(e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*subgroup*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // basic_group ::= subgroup 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // basic_group ::= philology 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // basic_group ::= ligature 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.ligature(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // basic_group ::= stack 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResStack e = (ResStack)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SwitchAndTopgroup(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // basic_group ::= hieroglyph 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResTopgroup e = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SwitchAndTopgroup(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // horizontal_list ::= horizontal_list ASTERISK seps basic_group 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SwitchAndTopgroup e1 = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch e3 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e4 = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1.addHor(e2, e3, e4); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*horizontal_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // horizontal_list ::= basic_group 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*horizontal_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vertical_list ::= vertical_list COLON seps horizontal_list 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SwitchAndTopgroup e1 = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch e3 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e4 = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1.addVert(e2, e3, e4); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*vertical_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vertical_list ::= horizontal_list 
            {
              SwitchAndTopgroup RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*vertical_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // quadrat ::= vertical_list shading seps 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SwitchAndTopgroup e1 = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector e2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e3 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1.distribute(e2, e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*quadrat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // quadrat ::= vertical_list 
            {
              SwitchAndTopgroup RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e1 = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*quadrat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // top_group ::= error 
            {
              Object RESULT = null;
		 RESULT = "\n"; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // top_group ::= EXTRA seps 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* ignore e2 */
		   RESULT = e1 + "\n"; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // top_group ::= ALPHA seps 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* ignore e2 */
		   RESULT = "<textal>" + e1 + "</textal>\n"; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // top_group ::= HIERO seps 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* ignore e */
		   RESULT = "\n"; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // top_group ::= EXCLAMEXCLAM seps 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* ignore e */
		   RESULT = "\n"; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_group ::= EXCLAM seps 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* ignore e */
		   RESULT = "\n"; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_group ::= TEXTSUPER seps 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* ignore e2 */
		   RESULT = "<coord id=\"" + e1 + "\"/>"; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_group ::= QUESTIONQUESTION seps 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.string("----", e); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_group ::= QUESTION seps 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.string("--", e); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_group ::= CARET seps 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.string("<-->", e); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_group ::= box 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.normalize(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_group ::= quadrat 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchAndTopgroup e = (SwitchAndTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.aux.normalize(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sep ::= toggle 
            {
              ResSwitch RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*sep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sep ::= MINUS 
            {
              ResSwitch RESULT = null;
		 RESULT = new ResSwitch(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*sep*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seps ::= seps sep 
            {
              ResSwitch RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch e1 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1.join(e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*seps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seps ::= 
            {
              ResSwitch RESULT = null;
		 RESULT = new ResSwitch(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*seps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_groups ::= top_groups top_group 
            {
              ContentMatter RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ContentMatter e1 = (ContentMatter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e1.add(e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*top_groups*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_groups ::= seps 
            {
              ContentMatter RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch e = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* ignore e */
		   RESULT = new ContentMatter(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*top_groups*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= mdc_file EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // mdc_file ::= top_groups 
            {
              String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ContentMatter e = (ContentMatter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e.toString(); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*mdc_file*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

