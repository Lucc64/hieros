/***************************************************************************/
/*                                                                         */
/*  parser.java                                                            */
/*                                                                         */
/*  Copyright (c) 2009 Mark-Jan Nederhof                                   */
/*                                                                         */
/*  This file is part of the implementation of PhilologEG, and may only be */
/*  used, modified, and distributed under the terms of the                 */
/*  GNU General Public License (see doc/GPL.TXT).                          */
/*  By continuing to use, modify, or distribute this file you indicate     */
/*  that you have read the license and understand and accept it fully.     */
/*                                                                         */
/***************************************************************************/


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 06 16:58:26 GMT 2009
//----------------------------------------------------

package nederhof.res;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Jan 06 16:58:26 GMT 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\003\006\000\002\002\004\000\002\004" +
    "\002\000\002\004\003\000\002\005\004\000\002\006\002" +
    "\000\002\006\003\000\002\007\003\000\002\007\007\000" +
    "\002\007\007\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\007\000\002\011" +
    "\007\000\002\012\003\000\002\012\007\000\002\012\003" +
    "\000\002\013\007\000\002\013\007\000\002\014\007\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\007\000\002\016\007\000\002\016\007" +
    "\000\002\016\007\000\002\017\007\000\002\017\006\000" +
    "\002\020\014\000\002\021\015\000\002\022\015\000\002" +
    "\023\012\000\002\024\002\000\002\024\003\000\002\025" +
    "\002\000\002\025\004\000\002\026\006\000\002\027\004" +
    "\000\002\030\002\000\002\030\004\000\002\031\005\000" +
    "\002\032\002\000\002\032\003\000\002\033\006\000\002" +
    "\033\005\000\002\034\004\000\002\034\007\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\002\000" +
    "\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\040\002\uffc5\003\uffc5\006\uffc5\011\uffc5\014" +
    "\uffc5\015\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\001\002\000\040\002" +
    "\uffff\003\uffff\006\uffff\011\uffff\014\uffff\015\012\020\011" +
    "\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\031\uffff\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\036\002\uffc5\003\uffc5\006\uffc5\011" +
    "\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\001\002\000\034\002" +
    "\uffd4\003\uffd4\006\uffd4\011\uffd4\014\036\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\001" +
    "\002\000\060\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\001\002\000" +
    "\014\016\uffc5\020\uffc5\026\uffc5\030\uffc5\031\uffc5\001\002" +
    "\000\034\002\ufffe\003\ufffe\006\ufffe\011\ufffe\014\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\031\ufffe\001\002\000\014\016\021\020\011\026\022\030" +
    "\020\031\016\001\002\000\010\012\uffc5\016\uffc5\020\uffc5" +
    "\001\002\000\010\012\uffc7\016\uffc7\020\uffc7\001\002\000" +
    "\004\016\027\001\002\000\010\012\uffc6\016\uffc6\020\uffc6" +
    "\001\002\000\052\002\uffce\003\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\031\uffce\001\002\000\012\012\uffc8\016\uffc8" +
    "\017\023\020\uffc8\001\002\000\010\026\026\030\025\031" +
    "\024\001\002\000\010\012\uffca\016\uffca\020\uffca\001\002" +
    "\000\010\012\uffc9\016\uffc9\020\uffc9\001\002\000\010\012" +
    "\uffcb\016\uffcb\020\uffcb\001\002\000\052\002\uffcf\003\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\001\002\000" +
    "\010\012\031\016\uffcd\020\011\001\002\000\012\020\uffc5" +
    "\026\uffc5\030\uffc5\031\uffc5\001\002\000\012\020\011\026" +
    "\022\030\020\031\016\001\002\000\004\016\uffcc\001\002" +
    "\000\046\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\014\036\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\001" +
    "\002\000\032\002\ufffc\003\061\006\064\011\047\021\072" +
    "\022\065\023\056\024\054\025\071\026\051\027\055\031" +
    "\045\001\002\000\052\002\uffd1\003\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1\015" +
    "\012\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\031\uffd1\001\002\000\052\002\uffd0\003" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\001\002" +
    "\000\050\002\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031" +
    "\uffc5\001\002\000\050\002\uffd2\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2\020" +
    "\011\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\031\uffd2\001\002\000\016\002\uffe6\004\uffe6\005" +
    "\uffe6\007\uffe6\010\uffe6\012\uffe6\001\002\000\016\002\ufff5" +
    "\004\ufff5\005\ufff1\007\ufff5\010\145\012\ufff5\001\002\000" +
    "\016\002\uffe9\004\uffe9\005\uffe9\007\uffe9\010\uffe9\012\uffe9" +
    "\001\002\000\026\002\uffd1\004\uffd1\005\uffd1\007\uffd1\010" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\012\020\uffd1\001\002" +
    "\000\006\002\ufffb\007\ufffb\001\002\000\024\002\uffc5\004" +
    "\uffc5\005\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\020\uffc5\001\002\000\016\002\uffea\004\uffea\005\uffea\007" +
    "\uffea\010\uffea\012\uffea\001\002\000\030\002\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\012\020\uffd1\001\002\000\016\002\uffe7\004\uffe7" +
    "\005\uffe7\007\uffe7\010\uffe7\012\uffe7\001\002\000\016\002" +
    "\uffe8\004\uffe8\005\uffe8\007\uffe8\010\uffe8\012\uffe8\001\002" +
    "\000\010\006\uffd1\015\012\020\uffd1\001\002\000\026\002" +
    "\uffd1\004\uffd1\005\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\012\020\uffd1\001\002\000\010\006\uffd1\015" +
    "\012\020\uffd1\001\002\000\004\010\166\001\002\000\004" +
    "\005\162\001\002\000\010\002\ufff7\004\156\007\ufff7\001" +
    "\002\000\014\002\ufff6\004\ufff6\005\136\007\ufff6\012\ufff6" +
    "\001\002\000\004\002\001\001\002\000\032\006\uffc5\011" +
    "\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\001\002\000\010\006" +
    "\uffd1\015\012\020\uffd1\001\002\000\016\002\ufff4\004\ufff4" +
    "\005\uffef\007\ufff4\010\uffeb\012\ufff4\001\002\000\010\002" +
    "\ufffa\004\112\007\ufffa\001\002\000\016\002\uffe5\004\uffe5" +
    "\005\uffe5\007\uffe5\010\uffe5\012\uffe5\001\002\000\026\002" +
    "\uffd1\004\uffd1\005\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\012\020\uffd1\001\002\000\026\002\uffd1\004" +
    "\uffd1\005\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\012\020\uffd1\001\002\000\024\002\uffc5\004\uffc5\005" +
    "\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\020\uffc5" +
    "\001\002\000\024\002\uffda\004\uffda\005\uffda\007\uffda\010" +
    "\uffda\012\uffda\013\077\014\uffda\020\011\001\002\000\020" +
    "\002\uffd9\004\uffd9\005\uffd9\007\uffd9\010\uffd9\012\uffd9\014" +
    "\uffd9\001\002\000\020\002\uffd4\004\uffd4\005\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\014\036\001\002\000\004\027\100\001" +
    "\002\000\026\002\uffd1\004\uffd1\005\uffd1\007\uffd1\010\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\012\020\uffd1\001\002\000" +
    "\024\002\uffc5\004\uffc5\005\uffc5\007\uffc5\010\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\020\uffc5\001\002\000\024\002\uffd6\004" +
    "\uffd6\005\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\020\011\001\002\000\016\002\uffe0\004\uffe0\005\uffe0\007" +
    "\uffe0\010\uffe0\012\uffe0\001\002\000\024\002\uffc5\004\uffc5" +
    "\005\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\020" +
    "\uffc5\001\002\000\024\002\uffd8\004\uffd8\005\uffd8\007\uffd8" +
    "\010\uffd8\012\uffd8\013\077\014\uffd8\020\011\001\002\000" +
    "\020\002\uffd4\004\uffd4\005\uffd4\007\uffd4\010\uffd4\012\uffd4" +
    "\014\036\001\002\000\022\002\uffd8\004\uffd8\005\uffd8\007" +
    "\uffd8\010\uffd8\012\uffd8\013\077\014\uffd8\001\002\000\020" +
    "\002\uffd7\004\uffd7\005\uffd7\007\uffd7\010\uffd7\012\uffd7\014" +
    "\uffd7\001\002\000\016\002\uffe4\004\uffe4\005\uffe4\007\uffe4" +
    "\010\uffe4\012\uffe4\001\002\000\036\003\uffd1\006\uffd1\011" +
    "\uffd1\014\uffd1\015\012\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\001\002\000" +
    "\034\003\uffc5\006\uffc5\011\uffc5\014\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031" +
    "\uffc5\001\002\000\030\003\061\006\064\011\047\021\072" +
    "\022\065\023\056\024\054\025\071\026\051\027\055\031" +
    "\045\001\002\000\050\002\uffd4\003\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\014\036\020" +
    "\011\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\031\uffd4\001\002\000\044\002\uffd5\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\031\uffd5\001\002\000\006\002\ufff9\007\ufff9\001\002" +
    "\000\006\006\uffc5\020\uffc5\001\002\000\006\006\122\020" +
    "\011\001\002\000\032\006\uffc5\011\uffc5\014\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\031\uffc5\001\002\000\026\006\064\011\047\021\072" +
    "\022\065\023\056\024\054\025\071\026\051\027\055\031" +
    "\045\001\002\000\004\012\125\001\002\000\032\006\uffc5" +
    "\011\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\001\002\000\026" +
    "\006\064\011\047\021\072\022\065\023\056\024\054\025" +
    "\071\026\051\027\055\031\045\001\002\000\004\007\130" +
    "\001\002\000\022\002\uffc5\004\uffc5\005\uffc5\007\uffc5\010" +
    "\uffc5\012\uffc5\014\uffc5\020\uffc5\001\002\000\016\002\uffdd" +
    "\004\uffdd\005\uffdd\007\uffdd\010\uffdd\012\uffdd\001\002\000" +
    "\026\006\064\011\047\021\072\022\065\023\056\024\054" +
    "\025\071\026\051\027\055\031\045\001\002\000\010\005" +
    "\ufff1\007\154\010\145\001\002\000\006\005\136\007\137" +
    "\001\002\000\016\002\uffef\004\uffef\005\uffef\007\uffef\010" +
    "\uffeb\012\uffef\001\002\000\034\006\uffd1\011\uffd1\014\uffd1" +
    "\015\012\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\031\uffd1\001\002\000\022\002\uffc5" +
    "\004\uffc5\005\uffc5\007\uffc5\010\uffc5\012\uffc5\014\uffc5\020" +
    "\uffc5\001\002\000\016\002\uffec\004\uffec\005\uffec\007\uffec" +
    "\010\uffec\012\uffec\001\002\000\032\006\uffc5\011\uffc5\014" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\031\uffc5\001\002\000\026\006\064\011" +
    "\047\021\072\022\065\023\056\024\054\025\071\026\051" +
    "\027\055\031\045\001\002\000\016\002\ufff1\004\ufff1\005" +
    "\ufff1\007\ufff1\010\145\012\ufff1\001\002\000\014\002\ufff2" +
    "\004\ufff2\005\ufff2\007\ufff2\012\ufff2\001\002\000\034\006" +
    "\uffd1\011\uffd1\014\uffd1\015\012\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\001" +
    "\002\000\032\006\uffc5\011\uffc5\014\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031" +
    "\uffc5\001\002\000\026\006\151\011\047\021\072\022\065" +
    "\023\056\024\054\025\071\026\051\027\055\031\045\001" +
    "\002\000\016\002\uffed\004\uffed\005\uffed\007\uffed\010\uffed" +
    "\012\uffed\001\002\000\032\006\uffc5\011\uffc5\014\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\031\uffc5\001\002\000\016\002\uffeb\004\uffeb\005" +
    "\uffeb\007\uffeb\010\uffeb\012\uffeb\001\002\000\026\006\064" +
    "\011\047\021\072\022\065\023\056\024\054\025\071\026" +
    "\051\027\055\031\045\001\002\000\020\002\uffc5\004\uffc5" +
    "\005\uffc5\007\uffc5\012\uffc5\014\uffc5\020\uffc5\001\002\000" +
    "\014\002\ufff0\004\ufff0\005\ufff0\007\ufff0\012\ufff0\001\002" +
    "\000\036\003\uffd1\006\uffd1\011\uffd1\014\uffd1\015\012\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\031\uffd1\001\002\000\034\003\uffc5\006\uffc5\011" +
    "\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\001\002\000\030\003" +
    "\061\006\064\011\047\021\072\022\065\023\056\024\054" +
    "\025\071\026\051\027\055\031\045\001\002\000\006\002" +
    "\ufff8\007\ufff8\001\002\000\034\006\uffd1\011\uffd1\014\uffd1" +
    "\015\012\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\031\uffd1\001\002\000\032\006\uffc5" +
    "\011\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\001\002\000\026" +
    "\006\064\011\047\021\072\022\065\023\056\024\054\025" +
    "\071\026\051\027\055\031\045\001\002\000\014\002\ufff3" +
    "\004\ufff3\005\ufff3\007\ufff3\012\ufff3\001\002\000\034\006" +
    "\uffd1\011\uffd1\014\uffd1\015\012\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\001" +
    "\002\000\032\006\uffc5\011\uffc5\014\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031" +
    "\uffc5\001\002\000\026\006\151\011\047\021\072\022\065" +
    "\023\056\024\054\025\071\026\051\027\055\031\045\001" +
    "\002\000\016\002\uffee\004\uffee\005\uffee\007\uffee\010\uffee" +
    "\012\uffee\001\002\000\006\006\uffc5\020\uffc5\001\002\000" +
    "\006\006\174\020\011\001\002\000\032\006\uffc5\011\uffc5" +
    "\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\031\uffc5\001\002\000\026\006\064" +
    "\011\047\021\072\022\065\023\056\024\054\025\071\026" +
    "\051\027\055\031\045\001\002\000\004\012\177\001\002" +
    "\000\032\006\uffc5\011\uffc5\014\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5" +
    "\001\002\000\026\006\064\011\047\021\072\022\065\023" +
    "\056\024\054\025\071\026\051\027\055\031\045\001\002" +
    "\000\004\007\202\001\002\000\022\002\uffc5\004\uffc5\005" +
    "\uffc5\007\uffc5\010\uffc5\012\uffc5\014\uffc5\020\uffc5\001\002" +
    "\000\016\002\uffdc\004\uffdc\005\uffdc\007\uffdc\010\uffdc\012" +
    "\uffdc\001\002\000\024\002\uffc5\004\uffc5\005\uffc5\007\uffc5" +
    "\010\uffc5\012\uffc5\013\uffc5\014\uffc5\020\uffc5\001\002\000" +
    "\024\002\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8\012\uffd8" +
    "\013\077\014\uffd8\020\011\001\002\000\020\002\uffd4\004" +
    "\uffd4\005\uffd4\007\uffd4\010\uffd4\012\uffd4\014\036\001\002" +
    "\000\016\002\uffe1\004\uffe1\005\uffe1\007\uffe1\010\uffe1\012" +
    "\uffe1\001\002\000\006\006\uffc5\020\uffc5\001\002\000\006" +
    "\006\212\020\011\001\002\000\032\006\uffc5\011\uffc5\014" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\031\uffc5\001\002\000\026\006\064\011" +
    "\047\021\072\022\065\023\056\024\054\025\071\026\051" +
    "\027\055\031\045\001\002\000\004\007\215\001\002\000" +
    "\022\002\uffc5\004\uffc5\005\uffc5\007\uffc5\010\uffc5\012\uffc5" +
    "\014\uffc5\020\uffc5\001\002\000\016\002\uffdb\004\uffdb\005" +
    "\uffdb\007\uffdb\010\uffdb\012\uffdb\001\002\000\026\002\uffc5" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\020\uffc5\001\002\000\026\002\uffd8\004\uffd8" +
    "\005\uffd8\006\222\007\uffd8\010\uffd8\012\uffd8\013\077\014" +
    "\uffd8\020\011\001\002\000\020\002\uffd4\004\uffd4\005\uffd4" +
    "\007\uffd4\010\uffd4\012\uffd4\014\036\001\002\000\036\003" +
    "\uffc5\006\uffc5\007\uffc5\011\uffc5\014\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031" +
    "\uffc5\001\002\000\032\003\061\006\064\007\ufffc\011\047" +
    "\021\072\022\065\023\056\024\054\025\071\026\051\027" +
    "\055\031\045\001\002\000\004\007\225\001\002\000\024" +
    "\002\uffc5\004\uffc5\005\uffc5\007\uffc5\010\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\020\uffc5\001\002\000\024\002\uffd8\004\uffd8" +
    "\005\uffd8\007\uffd8\010\uffd8\012\uffd8\013\077\014\uffd8\020" +
    "\011\001\002\000\020\002\uffd4\004\uffd4\005\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\014\036\001\002\000\016\002\uffde\004" +
    "\uffde\005\uffde\007\uffde\010\uffde\012\uffde\001\002\000\016" +
    "\002\uffe3\004\uffe3\005\uffe3\007\uffe3\010\uffe3\012\uffe3\001" +
    "\002\000\024\002\uffda\004\uffda\005\uffda\007\uffda\010\uffda" +
    "\012\uffda\013\077\014\uffda\020\011\001\002\000\020\002" +
    "\uffd4\004\uffd4\005\uffd4\007\uffd4\010\uffd4\012\uffd4\014\036" +
    "\001\002\000\016\002\uffdf\004\uffdf\005\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\001\002\000\024\002\uffc5\004\uffc5\005\uffc5" +
    "\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\020\uffc5\001" +
    "\002\000\024\002\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\013\077\014\uffd8\020\011\001\002\000\020\002" +
    "\uffd4\004\uffd4\005\uffd4\007\uffd4\010\uffd4\012\uffd4\014\036" +
    "\001\002\000\016\002\uffe2\004\uffe2\005\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\001\002\000\044\002\uffd3\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\031\uffd3\001\002\000\036\002\ufffd\003\ufffd\006\ufffd\011" +
    "\ufffd\014\ufffd\020\011\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\031\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\003\004\036\003\001\001\000\010\004" +
    "\007\005\012\033\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\241\001\001\000\006\030\034\031" +
    "\033\001\001\000\002\001\001\000\004\036\013\001\001" +
    "\000\002\001\001\000\006\034\016\035\014\001\001\000" +
    "\004\036\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\031\001\001\000\006\034\032\035\014\001\001\000\002" +
    "\001\001\000\006\030\240\031\033\001\001\000\036\006" +
    "\062\007\045\010\066\011\061\012\057\013\042\014\056" +
    "\015\065\016\047\017\043\020\052\021\051\022\041\023" +
    "\067\001\001\000\006\032\037\033\036\001\001\000\002" +
    "\001\001\000\004\036\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\234\033\036\001\001\000\002\001\001\000\004\036" +
    "\231\001\001\000\002\001\001\000\006\032\216\033\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\207\033\036\001\001\000\006\032\203\033\036\001\001" +
    "\000\006\032\171\033\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\131\036\114\001\001\000\006\032" +
    "\117\033\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\103\033\036\001\001\000" +
    "\006\032\072\033\036\001\001\000\004\036\073\001\001" +
    "\000\006\024\075\026\074\001\001\000\002\001\001\000" +
    "\006\030\102\031\033\001\001\000\002\001\001\000\006" +
    "\032\100\033\036\001\001\000\004\036\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\104\001\001" +
    "\000\006\025\105\026\106\001\001\000\006\030\110\031" +
    "\033\001\001\000\006\025\107\026\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\112\033\036\001" +
    "\001\000\006\027\113\036\114\001\001\000\034\007\116" +
    "\010\066\011\061\012\057\013\042\014\056\015\065\016" +
    "\047\017\043\020\052\021\051\022\041\023\067\001\001" +
    "\000\006\030\115\031\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\120\001\001\000\002\001\001" +
    "\000\006\027\122\036\114\001\001\000\032\010\123\011" +
    "\061\012\057\013\042\014\056\015\065\016\047\017\043" +
    "\020\052\021\051\022\041\023\067\001\001\000\002\001" +
    "\001\000\006\027\125\036\114\001\001\000\032\010\126" +
    "\011\061\012\057\013\042\014\056\015\065\016\047\017" +
    "\043\020\052\021\051\022\041\023\067\001\001\000\002" +
    "\001\001\000\006\027\130\036\114\001\001\000\002\001" +
    "\001\000\030\011\133\012\057\013\132\014\056\015\134" +
    "\016\047\017\043\020\052\021\051\022\041\023\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\140\033\036\001\001\000\006\027\137\036" +
    "\114\001\001\000\002\001\001\000\006\027\141\036\114" +
    "\001\001\000\026\012\143\013\142\014\056\015\134\016" +
    "\047\017\043\020\052\021\051\022\041\023\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\145\033" +
    "\036\001\001\000\006\027\146\036\114\001\001\000\022" +
    "\014\147\015\151\016\047\017\043\020\052\021\051\022" +
    "\041\023\067\001\001\000\002\001\001\000\006\027\152" +
    "\036\114\001\001\000\002\001\001\000\030\011\133\012" +
    "\057\013\142\014\056\015\134\016\047\017\043\020\052" +
    "\021\051\022\041\023\067\001\001\000\006\027\154\036" +
    "\114\001\001\000\002\001\001\000\006\032\156\033\036" +
    "\001\001\000\006\027\157\036\114\001\001\000\034\007" +
    "\160\010\066\011\061\012\057\013\042\014\056\015\065" +
    "\016\047\017\043\020\052\021\051\022\041\023\067\001" +
    "\001\000\002\001\001\000\006\032\162\033\036\001\001" +
    "\000\006\027\163\036\114\001\001\000\026\012\164\013" +
    "\142\014\056\015\134\016\047\017\043\020\052\021\051" +
    "\022\041\023\067\001\001\000\002\001\001\000\006\032" +
    "\166\033\036\001\001\000\006\027\167\036\114\001\001" +
    "\000\022\014\170\015\151\016\047\017\043\020\052\021" +
    "\051\022\041\023\067\001\001\000\002\001\001\000\004" +
    "\036\172\001\001\000\002\001\001\000\006\027\174\036" +
    "\114\001\001\000\032\010\175\011\061\012\057\013\042" +
    "\014\056\015\065\016\047\017\043\020\052\021\051\022" +
    "\041\023\067\001\001\000\002\001\001\000\006\027\177" +
    "\036\114\001\001\000\032\010\200\011\061\012\057\013" +
    "\042\014\056\015\065\016\047\017\043\020\052\021\051" +
    "\022\041\023\067\001\001\000\002\001\001\000\006\027" +
    "\202\036\114\001\001\000\002\001\001\000\004\036\204" +
    "\001\001\000\006\025\205\026\106\001\001\000\006\030" +
    "\206\031\033\001\001\000\002\001\001\000\004\036\210" +
    "\001\001\000\002\001\001\000\006\027\212\036\114\001" +
    "\001\000\032\010\213\011\061\012\057\013\042\014\056" +
    "\015\065\016\047\017\043\020\052\021\051\022\041\023" +
    "\067\001\001\000\002\001\001\000\006\027\215\036\114" +
    "\001\001\000\002\001\001\000\004\036\217\001\001\000" +
    "\006\025\220\026\106\001\001\000\006\030\230\031\033" +
    "\001\001\000\006\027\222\036\114\001\001\000\036\006" +
    "\223\007\045\010\066\011\061\012\057\013\042\014\056" +
    "\015\065\016\047\017\043\020\052\021\051\022\041\023" +
    "\067\001\001\000\002\001\001\000\004\036\225\001\001" +
    "\000\006\025\226\026\106\001\001\000\006\030\227\031" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\232\026\074\001\001\000\006\030\233\031\033\001" +
    "\001\000\002\001\001\000\004\036\235\001\001\000\006" +
    "\025\236\026\106\001\001\000\006\030\237\031\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // Used for checking whether glyph names and 
    // such have been defined.
    public IParsingContext context;

    // Construct parser by making lexer and storing input string.
    public parser(String string, IParsingContext context) {
	super(new lexer(new StringReader(string)));
	context.setInput(string);
	this.context = context;
    }

    // Create error message.
    public void report_error(String message, Object info) {
	if (info instanceof java_cup.runtime.Symbol) {
	    java_cup.runtime.Symbol sym = (java_cup.runtime.Symbol) info;
	    int charPos = sym.left;
	    int lineNo = sym.right;
	    context.reportError(message, charPos, lineNo);
	} else
	context.addError(message + "\n");
    }

    // As above, but terminate parsing.
    public void report_fatal_error(String message, Object info) {
	report_error(message, info);
	done_parsing();
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // whitespaces ::= whitespaces WHITESPACE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*whitespaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // whitespaces ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*whitespaces*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arg ::= REAL 
            {
              ResArg RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResArg(n,nleft,nright); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arg ::= NAT_NUM 
            {
              ResArg RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResArg(n,nleft,nright); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arg ::= NAME 
            {
              ResArg RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResArg(n,nleft,nright); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arg ::= NAME EQUALS REAL 
            {
              ResArg RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResArg(n1,n2,n1left,n1right); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arg ::= NAME EQUALS NAT_NUM 
            {
              ResArg RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResArg(n1,n2,n1left,n1right); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arg ::= NAME EQUALS NAME 
            {
              ResArg RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResArg(n1,n2,n1left,n1right); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arg_list ::= arg whitespaces COMMA whitespaces arg_list 
            {
              LinkedList RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ResArg a = (ResArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList as = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 as.addFirst(a);
		   RESULT = as; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*arg_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arg_list ::= arg whitespaces 
            {
              LinkedList RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResArg a = (ResArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList as = new LinkedList();
		   as.addFirst(a);
		   RESULT = as; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*arg_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arg_bracket_list ::= SQ_OPEN whitespaces SQ_CLOSE 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*arg_bracket_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arg_bracket_list ::= SQ_OPEN whitespaces arg_list SQ_CLOSE 
            {
              LinkedList RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList as = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = as; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*arg_bracket_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optional_arg_bracket_list ::= arg_bracket_list 
            {
              LinkedList RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList as = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = as; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*optional_arg_bracket_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optional_arg_bracket_list ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*optional_arg_bracket_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // switch ::= EXCLAM optional_arg_bracket_list whitespaces 
            {
              ResSwitch RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList as = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ResSwitch(as,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*switch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // switches ::= switch switches 
            {
              ResSwitch RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch s1 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s1.join(s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*switches*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // switches ::= 
            {
              ResSwitch RESULT = null;
		 RESULT = new ResSwitch(); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*switches*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ws ::= whitespaces switches 
            {
              ResSwitch RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ws*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // note ::= CARET STRING optional_arg_bracket_list whitespaces 
            {
              ResNote RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ResNote(s,a,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*note*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // notes ::= note notes 
            {
              LinkedList RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResNote n = (ResNote)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList ns = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ns.addFirst(n);
		   RESULT = ns; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*notes*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // notes ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*notes*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // optional_note ::= note 
            {
              ResNote RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResNote n = (ResNote)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*optional_note*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // optional_note ::= 
            {
              ResNote RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*optional_note*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // modify ::= MODIFY optional_arg_bracket_list whitespaces OPEN ws top_group CLOSE ws 
            {
              ResModify RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ResSwitch s1 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResTopgroup g = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResModify(a,s1,g,s2,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*modify*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // insert ::= INSERT optional_arg_bracket_list whitespaces OPEN ws top_group COMMA ws top_group CLOSE ws 
            {
              ResInsert RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ResSwitch s0 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ResTopgroup g1 = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ResSwitch s1 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResTopgroup g2 = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResInsert(a,s0,g1,s1,g2,s2,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*insert*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stack ::= STACK optional_arg_bracket_list whitespaces OPEN ws top_group COMMA ws top_group CLOSE ws 
            {
              ResStack RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ResSwitch s0 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ResTopgroup g1 = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ResSwitch s1 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResTopgroup g2 = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResStack(a,s0,g1,s1,g2,s2,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*stack*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // box ::= NAME optional_arg_bracket_list whitespaces OPEN ws optional_hieroglyphic CLOSE whitespaces notes switches 
            {
              ResBox RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ResSwitch s1 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ResHieroglyphic h = (ResHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList no = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResBox(n,a,s1,h,no,s2,nleft,nright,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*box*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // empty_glyph ::= PERIOD whitespaces optional_note switches 
            {
              ResEmptyglyph RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResNote n = (ResNote)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResEmptyglyph(n,s,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*empty_glyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // empty_glyph ::= EMPTY optional_arg_bracket_list whitespaces optional_note switches 
            {
              ResEmptyglyph RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResNote n = (ResNote)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResEmptyglyph(a,n,s,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*empty_glyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // named_glyph ::= STRING optional_arg_bracket_list whitespaces notes switches 
            {
              ResNamedglyph RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList no = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResNamedglyph(n,a,no,s,nleft,nright,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*named_glyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // named_glyph ::= NAT_NUM optional_arg_bracket_list whitespaces notes switches 
            {
              ResNamedglyph RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList no = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResNamedglyph(n,a,no,s,nleft,nright,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*named_glyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // named_glyph ::= NAME optional_arg_bracket_list whitespaces notes switches 
            {
              ResNamedglyph RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList no = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResNamedglyph(n,a,no,s,nleft,nright,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*named_glyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // named_glyph ::= GLYPH_NAME optional_arg_bracket_list whitespaces notes switches 
            {
              ResNamedglyph RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList no = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResNamedglyph(n,a,no,s,nleft,nright,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*named_glyph*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // basic_group ::= modify 
            {
              ResBasicgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResModify g = (ResModify)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // basic_group ::= insert 
            {
              ResBasicgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResInsert g = (ResInsert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // basic_group ::= stack 
            {
              ResBasicgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResStack g = (ResStack)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // basic_group ::= box 
            {
              ResBasicgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResBox g = (ResBox)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // basic_group ::= empty_glyph 
            {
              ResBasicgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResEmptyglyph g = (ResEmptyglyph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // basic_group ::= named_glyph 
            {
              ResBasicgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResNamedglyph g = (ResNamedglyph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*basic_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // hor_sub_group ::= basic_group 
            {
              ResHorsubgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResBasicgroup g = (ResBasicgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResHorsubgroup(g); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*hor_sub_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // hor_sub_group ::= OPEN ws vert_group CLOSE ws 
            {
              ResHorsubgroup RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ResSwitch s1 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResVertgroup g = (ResVertgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResHorsubgroup(s1,g,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*hor_sub_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // hor_group ::= hor_group ASTERISK optional_arg_bracket_list ws hor_sub_group 
            {
              ResHorgroup RESULT = null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ResHorgroup g1 = (ResHorgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResHorsubgroup g2 = (ResHorsubgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g1.addGroup(a,s,g2,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*hor_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // hor_group ::= hor_sub_group ASTERISK optional_arg_bracket_list ws hor_sub_group 
            {
              ResHorgroup RESULT = null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ResHorsubgroup g1 = (ResHorsubgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResHorsubgroup g2 = (ResHorsubgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResHorgroup(g1,a,s,g2,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*hor_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vert_sub_group ::= basic_group 
            {
              ResVertsubgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResBasicgroup g = (ResBasicgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResVertsubgroup(g); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*vert_sub_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vert_sub_group ::= OPEN ws hor_group CLOSE ws 
            {
              ResVertsubgroup RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ResSwitch s1 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResHorgroup g = (ResHorgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResSwitch s2 = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResVertsubgroup(s1,g,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*vert_sub_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vert_sub_group ::= hor_group 
            {
              ResVertsubgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResHorgroup g = (ResHorgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResVertsubgroup(g); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*vert_sub_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vert_group ::= vert_group COLON optional_arg_bracket_list ws vert_sub_group 
            {
              ResVertgroup RESULT = null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ResVertgroup g1 = (ResVertgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResVertsubgroup g2 = (ResVertsubgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g1.addGroup(a,s,g2,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*vert_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vert_group ::= vert_sub_group COLON optional_arg_bracket_list ws vert_sub_group 
            {
              ResVertgroup RESULT = null;
		int g1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ResVertsubgroup g1 = (ResVertsubgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResVertsubgroup g2 = (ResVertsubgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResVertgroup(g1,a,s,g2,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*vert_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_group ::= basic_group 
            {
              ResTopgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResBasicgroup g = (ResBasicgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_group ::= hor_group 
            {
              ResTopgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResHorgroup g = (ResHorgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_group ::= vert_group 
            {
              ResTopgroup RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResVertgroup g = (ResVertgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = g; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*top_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // hieroglyphic ::= error 
            {
              ResHieroglyphic RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*hieroglyphic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // hieroglyphic ::= error MINUS optional_arg_bracket_list ws hieroglyphic 
            {
              ResHieroglyphic RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResHieroglyphic h = (ResHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*hieroglyphic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // hieroglyphic ::= top_group MINUS optional_arg_bracket_list ws hieroglyphic 
            {
              ResHieroglyphic RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ResTopgroup g = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResHieroglyphic h = (ResHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = h.addGroup(g,a,s,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*hieroglyphic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // hieroglyphic ::= top_group 
            {
              ResHieroglyphic RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResTopgroup g = (ResTopgroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResHieroglyphic(g,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*hieroglyphic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optional_hieroglyphic ::= hieroglyphic 
            {
              ResHieroglyphic RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResHieroglyphic h = (ResHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*optional_hieroglyphic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optional_hieroglyphic ::= 
            {
              ResHieroglyphic RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*optional_hieroglyphic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= arg_bracket_list whitespaces 
            {
              LinkedList RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // optional_header ::= header 
            {
              LinkedList RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList h = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*optional_header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // optional_header ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*optional_header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= fragment EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResFragment start_val = (ResFragment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // fragment ::= whitespaces optional_header switches optional_hieroglyphic 
            {
              ResFragment RESULT = null;
		int heleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int heright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList he = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ResSwitch s = (ResSwitch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ResHieroglyphic hi = (ResHieroglyphic)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ResFragment(he,s,hi,parser.context); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*fragment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

